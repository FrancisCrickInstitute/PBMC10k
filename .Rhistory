## Order ##
plotList[[tag]] <- ggplot(
) + geom_bar(aes(y = N_cells, x = clusterName, fill = sampleID), data = dfResTemp, stat="identity"
) + labs(title=tag, x="Cluster", y = "Cell Count"
) + theme_bw(
) +  theme(
panel.border = element_rect(colour = "black", fill=NA, size=1),
plot.title = element_text(hjust = 0.5, size = 12)
) + coord_flip()
h <- sum(c("sampleName", "sampleColor") %in% names(OsC@meta.data))
if (h ==2){
dfCol <- unique(OsC@meta.data[,c("sampleName", "sampleColor")])
dfCol <- dfCol[dfCol$sampleName %in% unique(dfResTemp$sampleID), ]
colVec <- as.vector(dfCol$sampleColor)
names(colVec) <- as.vector(dfCol$sampleName)
plotList[[tag]] <- plotList[[tag]] + scale_fill_manual("Samples" ,values = colVec
)
}
## Calculate percentages for this subset ##
###########################################################################
## Save plot to file                                                     ##
FNbase <- paste0(tag,".Ncells", VersionPdfExt)
FN <- paste0(Obio@parameterList$reportFigDir, FNbase)
FNrel <- paste0("report_figures/", FNbase)
pdf(FN)
print(plotList[[tag]])
dev.off()
##                                                                       ##
###########################################################################
###########################################################################
## Add to chunk                                                          ##
figCap <- paste0(
'**Figure ',
figureCount,
'A:** Cell Count in each cluster for ',
tag,
'Download a pdf of this figure <a href="',FNrel,'" target="_blank">here</a>. '
)
NewChnk <- paste0(
paste0("#### Barchart_ ", tag),
"\n```{r Barchart-",tag,", results='asis', echo=F, eval=TRUE, warning=FALSE, fig.cap='",figCap,"'}\n",
"\n",
"\n print(plotList[['",tag,"']])",
"\n cat(  '\n')",
"\n\n\n```\n"
)
chnkVec <- c(
chnkVec,
NewChnk
)
## Done adding                                                             ##
#############################################################################
#############################################################################
## Add percentage plot                                                     ##
tag <- paste0(cellTypeIDs[i], "_Percent")
plotList[[tag]] <- ggplot(
) + geom_bar(aes(x = clusterName, y = Perc_cells, fill = sampleID), data = dfResTemp, stat="identity"
) + labs(title=tag, x="Cluster", y = "Percent Cells"
) + theme_bw(
) +  theme(
panel.border = element_rect(colour = "black", fill=NA, size=1),
plot.title = element_text(hjust = 0.5, size = 12)
) +  coord_flip()
h <- sum(c("sampleName", "sampleColor") %in% names(OsC@meta.data))
if (h ==2){
dfCol <- unique(OsC@meta.data[,c("sampleName", "sampleColor")])
dfCol <- dfCol[dfCol$sampleName %in% unique(dfResTemp$sampleID), ]
colVec <- as.vector(dfCol$sampleColor)
names(colVec) <- as.vector(dfCol$sampleName)
plotList[[tag]] <- plotList[[tag]] + scale_fill_manual("Samples" ,values = colVec
)
}
###########################################################################
## Save plot to file                                                     ##
FNbase <- paste0(tag, ".percent.cells",VersionPdfExt)
FN <- paste0(Obio@parameterList$reportFigDir, FNbase)
FNrel <- paste0("report_figures/", FNbase)
pdf(FN)
print(plotList[[tag]])
dev.off()
##                                                                       ##
###########################################################################
###########################################################################
## Add to chunk                                                          ##
figCap <- paste0(
'**Figure ',
figureCount,
'B:** Cell percentages in each cluster for ',
tag,
'Download a pdf of this figure <a href="',FNrel,'" target="_blank">here</a>. '
)
NewChnk <- paste0(
paste0("#### Barchart_ ", tag),
"\n```{r Barchart-percent_",tag,", results='asis', echo=F, eval=TRUE, warning=FALSE, fig.cap='",figCap,"'}\n",
"\n",
"\n print(plotList[['",tag,"']])",
"\n cat(  '\n')",
"\n\n\n```\n"
)
chnkVec <- c(
chnkVec,
NewChnk
)
## Done adding percentage plot                                             ##
#############################################################################
figureCount <- figureCount + 1
}
plotList
dfAvgExprAllCells <- Obio@dataTableList$dfAvglg10ExprAll
## Get average expression per cluster
dfAvgExprByCluster <- Obio@dataTableList$dfAvglg10ExprPerCluster
## Merge
dfDataTable <- merge(
dfAvgExprAllCells,
dfAvgExprByCluster,
by.x = "gene",
by.y = "gene",
all =T
)
dfDataTable[is.na(dfDataTable)] <- 0
clusterVec <- names(dfDataTable)
clusterVec <- clusterVec[!(clusterVec %in% c("gene", "all"))]
slopeVec <- as.vector(NULL, mode = "numeric")
intersectVec <- as.vector(NULL, mode = "numeric")
for (i in 1:length(clusterVec)){
LMformula <- as.formula(paste0(clusterVec[i]," ~ all"))
clusterFit <- lm(data=dfDataTable, formula = LMformula)
slopeVec <- c(
slopeVec,
coef(clusterFit)[[2]]
)
intersectVec <- c(
intersectVec,
coef(clusterFit)[[1]]
)
residuals <- round(clusterFit$residuals, 3)
dfTempResiduals <- data.frame(dfDataTable$gene, residuals)
names(dfTempResiduals) <- c("gene", paste0(clusterVec[i], "_Residuals"))
if (i ==1){
dfClusterResiduals <- dfTempResiduals
} else {
dfClusterResiduals <- merge(
dfClusterResiduals,
dfTempResiduals,
by.x = "gene",
by.y = "gene",
all =T
)
}
dfClusterResiduals[is.na(dfClusterResiduals)] <- 0
}
Obio@dataTableList[["dfClusterResiduals"]] <- dfClusterResiduals
## Make gene set with Residual marker genes ##
if (Obio@parameterList$geneIDcolumn != "hgnc_symbol" & Obio@parameterList$geneIDcolumn != "mgi_symbol"){
refGeneIDcolumn <- "hgnc_symbol"
dfAnno <- Obio@dfGeneAnnotation
dfAnno <- unique(dfAnno[,c("hgnc_symbol",Obio@parameterList$geneIDcolumn )])
dfAnno <- dfAnno[dfAnno[,Obio@parameterList$geneIDcolumn] %in% dfClusterResiduals[,"gene"],]
dfClusterResiduals <- merge(
dfClusterResiduals,
dfAnno,
by.x = "gene",
by.y = Obio@parameterList$geneIDcolumn
)
dfClusterResiduals$gene <- NULL
names(dfClusterResiduals) <- gsub("hgnc_symbol", "gene",names(dfClusterResiduals))
} else {
refGeneIDcolumn <- Obio@parameterList$geneIDcolumn
}
residualClusterMarkers <- list()
DefaultcutOff <- 1
clusterVec <- names(dfClusterResiduals)
clusterVec <- clusterVec[clusterVec != "gene"]
for (i in 1:length(clusterVec)){
clusterGenes <- as.vector(sort(unique(dfClusterResiduals[dfClusterResiduals[, clusterVec[i]] > DefaultcutOff,"gene"])))
if (length(clusterGenes) < 3){
usedCutOff <- DefaultcutOff/2
clusterGenes <- as.vector(sort(unique(dfClusterResiduals[dfClusterResiduals[, clusterVec[i]] > usedCutOff,"gene"])))
} else {
usedCutOff <- DefaultcutOff
}
if (length(clusterGenes) > 1){
residualClusterMarkers[[paste0(clusterVec[[i]], "_Linear_Regression_Markers_", DefaultcutOff)]] <- c(
paste0(clusterVec[[i]], "_Linear_Regression_Markers_", gsub("\\.", "_", usedCutOff) , " Experiment ", Obio@parameterList$project_id),
clusterGenes
)
}
}
plotList <- list()
chnkVec <- as.vector(NULL, mode = "character")
###############################################################################
## Make Heatmap                                                              ##
OsC@meta.data[["hmIdent2"]] <- paste0("C", OsC@meta.data[,"seurat_clusters"])
Idents(OsC) <- "hmIdent2"
levels <- paste0(
"C",
sort(unique(OsC@meta.data[,"seurat_clusters"]))
)
levels(OsC) <- levels
## Deal with more than 5000 cells ##
if (nrow(OsC@meta.data) > 5000){
set.seed(127)
n.cells <- 5000
OsC_HM <- OsC
OsC_HM@meta.data[["HM_sel"]] <- 0
selPos <- sample(x = nrow(OsC_HM@meta.data), size = n.cells, replace = FALSE, prob = NULL)
OsC_HM@meta.data[selPos, "HM_sel"] <- 1
OsC_HM <- subset(x = OsC_HM, subset = HM_sel == 1)
subsetString <- paste0("For this heatmap 5000 cells were randomly selected from ", nrow(OsC@meta.data)," cells in the experiment. ")
} else {
OsC_HM <- OsC
subsetString <- ""
}
## Scale Data ##
allGenes <- rownames(x = OsC_HM@assays$RNA)
OsC_HM <- ScaleData(OsC_HM, verbose = FALSE, features=allGenes)
## For the moment: resetting heatmap list to keep it short ##
Obio@parameterList[["cat2HMplotList"]] <- list()
Obio@parameterList[["cat2HMplotList"]][["Top5_Cluster_Markers"]] <- as.vector(dfTop5$gene)
## Add top transcription factors for each cluster ##
## Get transcription factor genes ##
if (Obio@parameterList$geneIDcolumn != "mgi_symbol" & Obio@parameterList$geneIDcolumn != "hgnc_symbol") {
queryGS <- "hgnc_symbol"
} else {
queryGS <- Obio@parameterList$geneIDcolumn
}
tempVec <- retrieve.gene.category.from.db(
cat_id = "ag_lab_categories__10",
password = db.pwd,
gene.symbol = queryGS,
user = Obio@parameterList$db.user,
host = Obio@parameterList$host
)
###############################################################################
## If this is fish, translation is non-human or non-mouse, translation is necessary
if (queryGS != Obio@parameterList$geneIDcolumn){
dfAnno <- Obio@dfGeneAnnotation
dfAnno <- unique(dfAnno[,c("hgnc_symbol",Obio@parameterList$geneIDcolumn )])
dfAnno <- dfAnno[dfAnno$hgnc_symbol != "", ]
dfAnno <- dfAnno[dfAnno$hgnc_symbol %in% tempVec, ]
tempVec <- unique(dfAnno[,Obio@parameterList$geneIDcolumn])
tempVec <- tempVec[tempVec != ""]
}
dfHMG <- dfGeneralMarkers[dfGeneralMarkers$gene %in% tempVec, ]
dfHMGsel <- data.frame(dfHMG %>% group_by(cluster) %>% top_n(5, avg_diff))
Obio@parameterList[["cat2HMplotList"]][["Top5_TF_Cluster_Markers"]] <- as.vector(unique(dfHMGsel$gene))
## Done with translation
plotList <- list()
chnkVec <- as.vector(NULL, mode = "character")
###############################################################################
## Make Heatmap                                                              ##
OsC@meta.data[["hmIdent2"]] <- paste0("C", OsC@meta.data[,"seurat_clusters"])
plotList <- list()
chnkVec <- as.vector(NULL, mode = "character")
###############################################################################
## Make Heatmap                                                              ##
OsC@meta.data[["hmIdent2"]] <- paste0("C", OsC@meta.data[,"seurat_clusters"])
Idents(OsC) <- "hmIdent2"
levels <- paste0(
"C",
sort(unique(OsC@meta.data[,"seurat_clusters"]))
)
levels(OsC) <- levels
## Deal with more than 5000 cells ##
if (nrow(OsC@meta.data) > 5000){
set.seed(127)
n.cells <- 5000
OsC_HM <- OsC
OsC_HM@meta.data[["HM_sel"]] <- 0
selPos <- sample(x = nrow(OsC_HM@meta.data), size = n.cells, replace = FALSE, prob = NULL)
OsC_HM@meta.data[selPos, "HM_sel"] <- 1
OsC_HM <- subset(x = OsC_HM, subset = HM_sel == 1)
subsetString <- paste0("For this heatmap 5000 cells were randomly selected from ", nrow(OsC@meta.data)," cells in the experiment. ")
} else {
OsC_HM <- OsC
subsetString <- ""
}
## Scale Data ##
allGenes <- rownames(x = OsC_HM@assays$RNA)
OsC_HM <- ScaleData(OsC_HM, verbose = FALSE, features=allGenes)
Obio@parameterList[["cat2HMplotList"]] <- list()
Obio@parameterList[["cat2HMplotList"]][["Top5_Cluster_Markers"]] <- as.vector(dfTop5$gene)
DefaultAssay(OsC) <- "RNA"
Idents(OsC) <- "seurat_clusters"
lgFCthreshold <- 0.25
dfGeneralMarkers <- FindAllMarkers(
object = OsC,
only.pos = FALSE,
min.pct = 0.1,
logfc.threshold = lgFCthreshold,
test.use = "roc",
assay =  "RNA",
slot = "data"
)
if (nrow(dfGeneralMarkers) == 0){
lgFCthreshold <- 0.00
dfGeneralMarkers <- FindAllMarkers(
object = OsC,
only.pos = FALSE,
min.pct = 0.01,
logfc.threshold = lgFCthreshold,
test.use = "roc",
assay =  "RNA",
slot = "data"
)
}
if (nrow(dfGeneralMarkers) > 0){
dfGeneralMarkers[["direction"]] <- ""
dfGeneralMarkers[dfGeneralMarkers$avg_diff >= 0, "direction"] <- "positive"
dfGeneralMarkers[dfGeneralMarkers$avg_diff < 0, "direction"] <- "negative"
Obio@dataTableList[["dfGeneralMarkers"]] <- dfGeneralMarkers
dfGeneralMarkersFilt <- dfGeneralMarkers[dfGeneralMarkers$avg_diff > lgFCthreshold | dfGeneralMarkers$avg_diff < -lgFCthreshold,]
Obio@dataTableList[["dfGeneralMarkersFilt"]] <- dfGeneralMarkersFilt
dfTop1 <- data.frame(dfGeneralMarkers %>% group_by(cluster) %>% top_n(1, avg_diff))
dfTop5 <- data.frame(dfGeneralMarkers %>% group_by(cluster) %>% top_n(5, avg_diff))
dfTop10 <- data.frame(dfGeneralMarkers %>% group_by(cluster) %>% top_n(10, avg_diff))
Obio@dataTableList[["dfGeneralMarkersTop10"]] <- dfTop10
Obio@dataTableList$referenceList[["Top10clusterMarkers"]] <- as.vector(
unique(
dfTop10$gene
)
)
} else {
Obio@dataTableList[["dfGeneralMarkers"]] <- NULL
}
## Add transcription factors to dotplot ##
if (Obio@parameterList$geneIDcolumn != "mgi_symbol" & Obio@parameterList$geneIDcolumn != "hgnc_symbol") {
queryGS <- "hgnc_symbol"
} else {
queryGS <- Obio@parameterList$geneIDcolumn
}
tempVec <- retrieve.gene.category.from.db(
cat_id = "ag_lab_categories__10",
password = db.pwd,
gene.symbol = queryGS,
user = Obio@parameterList$db.user,
host = Obio@parameterList$host
)
###############################################################################
## If this is fish, translation is non-human or non-mouse, translation is necessary
if (queryGS != Obio@parameterList$geneIDcolumn){
dfAnno <- Obio@dfGeneAnnotation
dfAnno <- unique(dfAnno[,c("hgnc_symbol",Obio@parameterList$geneIDcolumn )])
dfAnno <- dfAnno[dfAnno$hgnc_symbol != "", ]
dfAnno <- dfAnno[dfAnno$hgnc_symbol %in% tempVec, ]
tempVec <- unique(dfAnno[,Obio@parameterList$geneIDcolumn])
tempVec <- tempVec[tempVec != ""]
}
dfHMG <- dfGeneralMarkers[dfGeneralMarkers$gene %in% tempVec, ]
dfHMGsel <- data.frame(dfHMG %>% group_by(cluster) %>% top_n(5, avg_diff))
Obio@parameterList[["cat2DotplotList"]][["Top5_TF_per_cluster_Markers"]] <- as.vector(unique(dfHMGsel$gene))
plotList <- list()
chnkVec <- as.vector(NULL, mode = "character")
###############################################################################
## Make Heatmap                                                              ##
OsC@meta.data[["hmIdent2"]] <- paste0("C", OsC@meta.data[,"seurat_clusters"])
Idents(OsC) <- "hmIdent2"
levels <- paste0(
"C",
sort(unique(OsC@meta.data[,"seurat_clusters"]))
)
levels(OsC) <- levels
## Deal with more than 5000 cells ##
if (nrow(OsC@meta.data) > 5000){
set.seed(127)
n.cells <- 5000
OsC_HM <- OsC
OsC_HM@meta.data[["HM_sel"]] <- 0
selPos <- sample(x = nrow(OsC_HM@meta.data), size = n.cells, replace = FALSE, prob = NULL)
OsC_HM@meta.data[selPos, "HM_sel"] <- 1
OsC_HM <- subset(x = OsC_HM, subset = HM_sel == 1)
subsetString <- paste0("For this heatmap 5000 cells were randomly selected from ", nrow(OsC@meta.data)," cells in the experiment. ")
} else {
OsC_HM <- OsC
subsetString <- ""
}
## Scale Data ##
allGenes <- rownames(x = OsC_HM@assays$RNA)
OsC_HM <- ScaleData(OsC_HM, verbose = FALSE, features=allGenes)
## For the moment: resetting heatmap list to keep it short ##
Obio@parameterList[["cat2HMplotList"]] <- list()
Obio@parameterList[["cat2HMplotList"]][["Top5_Cluster_Markers"]] <- as.vector(dfTop5$gene)
## Add top transcription factors for each cluster ##
## Get transcription factor genes ##
if (Obio@parameterList$geneIDcolumn != "mgi_symbol" & Obio@parameterList$geneIDcolumn != "hgnc_symbol") {
queryGS <- "hgnc_symbol"
} else {
queryGS <- Obio@parameterList$geneIDcolumn
}
tempVec <- retrieve.gene.category.from.db(
cat_id = "ag_lab_categories__10",
password = db.pwd,
gene.symbol = queryGS,
user = Obio@parameterList$db.user,
host = Obio@parameterList$host
)
###############################################################################
## If this is fish, translation is non-human or non-mouse, translation is necessary
if (queryGS != Obio@parameterList$geneIDcolumn){
dfAnno <- Obio@dfGeneAnnotation
dfAnno <- unique(dfAnno[,c("hgnc_symbol",Obio@parameterList$geneIDcolumn )])
dfAnno <- dfAnno[dfAnno$hgnc_symbol != "", ]
dfAnno <- dfAnno[dfAnno$hgnc_symbol %in% tempVec, ]
tempVec <- unique(dfAnno[,Obio@parameterList$geneIDcolumn])
tempVec <- tempVec[tempVec != ""]
}
dfHMG <- dfGeneralMarkers[dfGeneralMarkers$gene %in% tempVec, ]
dfHMGsel <- data.frame(dfHMG %>% group_by(cluster) %>% top_n(5, avg_diff))
Obio@parameterList[["cat2HMplotList"]][["Top5_TF_Cluster_Markers"]] <- as.vector(unique(dfHMGsel$gene))
## Done with translation
updatedCatIDs <- as.vector(NULL, mode = "character")
updatedCatNames <- as.vector(NULL, mode = "character")
length(Obio@parameterList[["cat2HMplotList"]]))
length(Obio@parameterList[["cat2HMplotList"]])
tag <- paste0("HMM_", names(Obio@parameterList$cat2HMplotList)[i])
textSize <- 5
HMname <- names(Obio@parameterList[["cat2HMplotList"]])[i]
HMname
HMname
tag
names(Obio@parameterList$cat2HMplotList)[i])
names(Obio@parameterList$cat2HMplotList)[i]
if (queryGS != Obio@parameterList$geneIDcolumn){
dfAnno <- Obio@dfGeneAnnotation
dfAnno <- unique(dfAnno[,c("hgnc_symbol",Obio@parameterList$geneIDcolumn )])
dfAnno <- dfAnno[dfAnno$hgnc_symbol != "", ]
dfAnno <- dfAnno[dfAnno$hgnc_symbol %in% tempVec, ]
tempVec <- unique(dfAnno[,Obio@parameterList$geneIDcolumn])
tempVec <- tempVec[tempVec != ""]
}
dfHMG <- dfGeneralMarkers[dfGeneralMarkers$gene %in% tempVec, ]
dfHMGsel <- data.frame(dfHMG %>% group_by(cluster) %>% top_n(5, avg_diff))
as.vector(unique(dfHMGsel$gene))
Obio@parameterList[["cat2HMplotList"]][["Top5_TF_Cluster_Markers"]] <- as.vector(unique(dfHMGsel$gene))
Obio@parameterList[["cat2HMplotList"]]
tag <- paste0("HMM_", names(Obio@parameterList$cat2HMplotList)[i])
textSize <- 5
HMname <- names(Obio@parameterList[["cat2HMplotList"]])[i]
i
i=1
tag <- paste0("HMM_", names(Obio@parameterList$cat2HMplotList)[i])
textSize <- 5
HMname <- names(Obio@parameterList[["cat2HMplotList"]])[i]
tag
HMname
DoHeatmap(
object = OsC_HM,
features = Obio@parameterList[["cat2HMplotList"]][[i]],
#group.by = "hmIdent",
draw.lines =T,
label = T,
group.bar = TRUE,
slot = "scale.data",
lines.width = 2 #With of separation lines in 'cells'
#slim.col.label = TRUE,
#remove.key = removeKey
# ) + theme(legend.position = "none"
) + theme(text = element_text(size=textSize)
) + scale_fill_gradientn(colors = c("blue", "white", "red"))
Obio@parameterList[["cat2HMplotList"]][[i]]
tag
tag
cat.name <- tag
cat_type <- paste0("temp_", Obio@parameterList$project_id)
cat.name
cat_type
gene.vec <- Obio@parameterList[["cat2HMplotList"]][[i]]
gene.vec
Obio@parameterList$species
Obio@projectDetailList$species
Obio@projectDetailList$species %in% c("mus_musculus", "homo_sapiens")
Obio@projectDetailList$species
cat.name <- tag
cat_type <- paste0("temp_", Obio@parameterList$project_id)
cat.name
cat_type
cat.description.text <- tag
gene.vec <- Obio@parameterList[["cat2HMplotList"]][[i]]
gene.vec
gene.vec <- gene.vec[gene.vec != ""]
gene.vec <- sort(na.omit(gene.vec))
refGeneIDcolumn
Obio@parameterList$geneIDcolumn
cat.name <- tag
cat_type <- paste0("temp_", Obio@parameterList$project_id)
cat.description.text <- tag
gene.vec <- Obio@parameterList[["cat2HMplotList"]][[i]]
gene.vec <- gene.vec[gene.vec != ""]
gene.vec <- sort(na.omit(gene.vec))
## Determine if cat exists ##
catID <- add.category.to.lab.reference.table.hs(
host = Obio@dbDetailList$host,
pwd = db.pwd,
user = Obio@dbDetailList$db.user,
cat.ref.db = Obio@dbDetailList$ref.cat.db,
cat.ref.db.table = Obio@parameterList$lab.categories.table,
gene.vector = gene.vec,
gene.id = Obio@parameterList$geneIDcolumn, #options hgnc_symbol, mgi_symbol
mm.hs.conversion.file =  paste0(hpc.mount, "Projects/reference_data/20160303.homologene.data.txt"),
cat_name = cat.name,
cat_type = cat_type,
data_source = paste0(Obio@parameterList$labname, " Lab"),
comments_1 = "",
comments_2 = "",
new.lab.category.table = FALSE,
cat.description.db  = "internal_categories",
cat.description.db.table = "category_description",
cat.description.text = cat.description.text,
lab.name = Obio@parameterList$labname,
replaceExistingCatName = TRUE
)
catID
